// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent that suggests optimal study times based on the student's class schedule.
 *
 * - suggestStudyTimes - A function that handles the study time suggestion process.
 * - SuggestStudyTimesInput - The input type for the suggestStudyTimes function.
 * - SuggestStudyTimesOutput - The return type for the suggestStudyTimes function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ClassScheduleSchema = z.object({
  className: z.string().describe('The name of the class.'),
  dayOfWeek: z.string().describe('The day of the week the class is on.'),
  startTime: z.string().describe('The time the class starts (e.g., 9:00 AM).'),
  endTime: z.string().describe('The time the class ends (e.g., 10:00 AM).'),
  location: z.string().describe('The location of the class.'),
});

const SuggestStudyTimesInputSchema = z.object({
  classSchedule: z.array(ClassScheduleSchema).describe('The student’s class schedule.'),
  additionalTasks: z.string().optional().describe('Any additional tasks the student needs to complete.'),
  preferredStudyStyle: z.string().optional().describe('The student’s preferred study style.'),
});
export type SuggestStudyTimesInput = z.infer<typeof SuggestStudyTimesInputSchema>;

const SuggestedTimeSlotSchema = z.object({
  dayOfWeek: z.string().describe('Day of the week for the study slot.'),
  startTime: z.string().describe('Start time of the study slot (e.g., 2:00 PM).'),
  endTime: z.string().describe('End time of the study slot (e.g., 4:00 PM).'),
  reason: z.string().describe('Reason for suggesting this time slot.'),
});

const SuggestStudyTimesOutputSchema = z.object({
  suggestedStudyTimes: z.array(SuggestedTimeSlotSchema).describe('Suggested study times based on the class schedule.'),
  overallSummary: z.string().describe('An overall summary of the suggested study times and strategy.'),
});
export type SuggestStudyTimesOutput = z.infer<typeof SuggestStudyTimesOutputSchema>;

export async function suggestStudyTimes(input: SuggestStudyTimesInput): Promise<SuggestStudyTimesOutput> {
  return suggestStudyTimesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestStudyTimesPrompt',
  input: {schema: SuggestStudyTimesInputSchema},
  output: {schema: SuggestStudyTimesOutputSchema},
  prompt: `You are an AI study assistant that helps students plan their study sessions.

  Given the student's class schedule, suggest optimal study times.
  Consider the student's additional tasks and preferred study style, if provided.

  Class Schedule:
  {{#each classSchedule}}
  - {{className}}: {{dayOfWeek}} from {{startTime}} to {{endTime}} at {{location}}
  {{/each}}

  {{#if additionalTasks}}
  Additional Tasks: {{additionalTasks}}
  {{/if}}

  {{#if preferredStudyStyle}}
  Preferred Study Style: {{preferredStudyStyle}}
  {{/if}}

  Please provide specific suggested study times, including the day of the week,
  start time, end time, and a brief reason for suggesting that time slot.
  Also, provide an overall summary of the suggested study times and strategy.

  Format your response as a JSON object matching the following schema:
  ${JSON.stringify(SuggestStudyTimesOutputSchema.describe(''))}`,
});

const suggestStudyTimesFlow = ai.defineFlow(
  {
    name: 'suggestStudyTimesFlow',
    inputSchema: SuggestStudyTimesInputSchema,
    outputSchema: SuggestStudyTimesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
